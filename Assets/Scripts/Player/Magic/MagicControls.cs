//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player/InputSystem/MagicControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MagicControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MagicControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MagicControls"",
    ""maps"": [
        {
            ""name"": ""Magic"",
            ""id"": ""064fb8f8-3c71-46c3-bd76-4d7c085a7b2c"",
            ""actions"": [
                {
                    ""name"": ""Lock-in"",
                    ""type"": ""Button"",
                    ""id"": ""43fe38ee-8782-48ac-b49c-3100d63c76a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cast"",
                    ""type"": ""Button"",
                    ""id"": ""8c688732-ab0d-43d2-b32f-b39d2c5bb3a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForceCast"",
                    ""type"": ""Value"",
                    ""id"": ""20a7b106-be3b-4249-972c-532132efda7f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""da88ad80-ccd0-495c-9d93-a773e8f384fe"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock-in"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39c1060f-cadf-41eb-b59c-2729585c5fd9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""9f8d6a0c-d747-4790-b2c5-eec40fef8eca"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceCast"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5c54748a-9e9f-4df5-aca0-5b35929a6c48"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceCast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c92e3d75-e3c4-4276-8ad6-73da1d90421a"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceCast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4bf7b610-8ae8-428e-b368-0c464e398cbb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceCast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8426f17a-dde3-4594-b26d-bf8daae2a3e3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceCast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""789e6e38-4d5a-4fa0-a745-cc9f5c278266"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceCast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""3d472c9d-d7f7-4559-8899-a965ccc6bd02"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForceCast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Magic
        m_Magic = asset.FindActionMap("Magic", throwIfNotFound: true);
        m_Magic_Lockin = m_Magic.FindAction("Lock-in", throwIfNotFound: true);
        m_Magic_Cast = m_Magic.FindAction("Cast", throwIfNotFound: true);
        m_Magic_ForceCast = m_Magic.FindAction("ForceCast", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Magic
    private readonly InputActionMap m_Magic;
    private IMagicActions m_MagicActionsCallbackInterface;
    private readonly InputAction m_Magic_Lockin;
    private readonly InputAction m_Magic_Cast;
    private readonly InputAction m_Magic_ForceCast;
    public struct MagicActions
    {
        private @MagicControls m_Wrapper;
        public MagicActions(@MagicControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Lockin => m_Wrapper.m_Magic_Lockin;
        public InputAction @Cast => m_Wrapper.m_Magic_Cast;
        public InputAction @ForceCast => m_Wrapper.m_Magic_ForceCast;
        public InputActionMap Get() { return m_Wrapper.m_Magic; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MagicActions set) { return set.Get(); }
        public void SetCallbacks(IMagicActions instance)
        {
            if (m_Wrapper.m_MagicActionsCallbackInterface != null)
            {
                @Lockin.started -= m_Wrapper.m_MagicActionsCallbackInterface.OnLockin;
                @Lockin.performed -= m_Wrapper.m_MagicActionsCallbackInterface.OnLockin;
                @Lockin.canceled -= m_Wrapper.m_MagicActionsCallbackInterface.OnLockin;
                @Cast.started -= m_Wrapper.m_MagicActionsCallbackInterface.OnCast;
                @Cast.performed -= m_Wrapper.m_MagicActionsCallbackInterface.OnCast;
                @Cast.canceled -= m_Wrapper.m_MagicActionsCallbackInterface.OnCast;
                @ForceCast.started -= m_Wrapper.m_MagicActionsCallbackInterface.OnForceCast;
                @ForceCast.performed -= m_Wrapper.m_MagicActionsCallbackInterface.OnForceCast;
                @ForceCast.canceled -= m_Wrapper.m_MagicActionsCallbackInterface.OnForceCast;
            }
            m_Wrapper.m_MagicActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Lockin.started += instance.OnLockin;
                @Lockin.performed += instance.OnLockin;
                @Lockin.canceled += instance.OnLockin;
                @Cast.started += instance.OnCast;
                @Cast.performed += instance.OnCast;
                @Cast.canceled += instance.OnCast;
                @ForceCast.started += instance.OnForceCast;
                @ForceCast.performed += instance.OnForceCast;
                @ForceCast.canceled += instance.OnForceCast;
            }
        }
    }
    public MagicActions @Magic => new MagicActions(this);
    public interface IMagicActions
    {
        void OnLockin(InputAction.CallbackContext context);
        void OnCast(InputAction.CallbackContext context);
        void OnForceCast(InputAction.CallbackContext context);
    }
}
